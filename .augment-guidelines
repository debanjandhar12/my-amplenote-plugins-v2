# Project Structure Overview

This project contains several Amplenote plugins, each residing in its own `src-*` directory.

- **Build Process:** The build is handled by esbuild.js. The output goes to the `dist/` directory. Build configurations are in `build/`.
- **Dependencies & Metadata:** Project dependencies and metadata are defined in package.json.
- **Common Utilities:** Shared code across plugins is located in `common-utils/`.
- **Main Plugins/Modules:** Each plugin resides in a `src-*` directory (e.g., `src-copilot/`).

## Tech Stack

- **Language**: JavaScript (ES Modules)
- **Testing**: `jest.config.js`, `jest.setup.js` and Playwright

## Standard Plugin Structure (`src-*/`)

```
src-*/                  # Plugin source directories
├── plugin.js           # Main entry point for the plugin
├── plugin.about.js     # Plugin metadata
├── embed/              # HTML files for embedded components
├── test/               # Test files
```

## Development Guidelines & Best Practices

- **Code Organization**:
    - Keep related functionality within the plugin's directory (`src-*/`).
    - Use common-utils/ for code shared across multiple plugins.
- **Environment Variables**: Access via `process.env`.
- **External Libraries**: Avoid importing directly, instead imported via ESM CDN using dynamicImportESM function. Usually, framework level libs such as React are imported onload and stored in the `window` object. 
- **Plugin Creation**:
    1. Create a new directory: `src-newplugin`.
    2. Add `plugin.js` (entry point).
    3. Optionally add `plugin.about.js` (metadata).
- **Copilot Plugin Specifics**:
    - Uses React, RadixUI and RadixIcons (via `window` object).
- **Tests**:
    - Use jest for unit testing.
    - Use playwright for end-to-end testing. There is a helper file in common-utils/playwright-helpers.ts for playwright testing.

## Tips
- Check an existing test file when writing a new one.
- Only write tests if asked to.
- Check existing related files and maintain consistency when working on new feature.