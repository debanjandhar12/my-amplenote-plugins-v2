---
description: 
globs: 
alwaysApply: true
---
# Project Structure Overview

This project contains several Amplenote plugins, each residing in its own `src-*` directory.

- **Build Process:** The build is handled by [esbuild.js](mdc:esbuild.js). The output goes to the `dist/` directory. Build configurations are in `build/`.
- **Dependencies & Metadata:** Project dependencies and metadata are defined in [package.json](mdc:package.json).
- **Common Utilities:** Shared code across plugins is located in [common-utils/](mdc:common-utils).
- **Configuration:**
    - Testing: [jest.config.js](mdc:jest.config.js), [jest.setup.js](mdc:jest.setup.js)
    - JavaScript Project Settings: [jsconfig.json](mdc:jsconfig.json)
- **Main Plugins/Modules:** Each plugin resides in a `src-*` directory (e.g., [src-copilot/](mdc:src-copilot)).

## Tech Stack

- **Language**: JavaScript/TypeScript (ES Modules)
- **Build System**: esbuild ([esbuild.js](mdc:esbuild.js))
- **Testing**: Jest ([jest.config.js](mdc:jest.config.js), [jest.setup.js](mdc:jest.setup.js)) and Playwright

## Standard Plugin Structure (`src-*/`)

```
src-*/                  # Plugin source directories
├── plugin.js           # Main entry point for the plugin
├── plugin.about.js     # Plugin metadata
├── embed/              # HTML files for embedded components
├── frontend-*/         # Frontend components
├── backend/            # Backend functionality
├── test/               # Test files
└── utils/              # Plugin-specific utilities
```

## Development Guidelines & Best Practices

- **Code Organization**:
    - Keep related functionality within the plugin's directory (`src-*/`).
    - Use [common-utils/](mdc:common-utils) for code shared across multiple plugins.
- **Environment Variables**: Access via `process.env`.
- **External Libraries**: Imported via ESM CDN using dynamicImportESM. Framework level libs such as React are imported onload and stored in the `window` object.
- **Plugin Creation**:
    1. Create a new directory: `src-newplugin`.
    2. Add `plugin.js` (entry point).
    3. Optionally add `plugin.about.js` (metadata).
- **Copilot Plugin Specifics**:
    - Uses React, RadixUI and RadixIcons (via `window` object).

